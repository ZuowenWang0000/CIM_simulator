/*
*   Institute of Neuroinformatics - Sensors Group - UZH/ETHz
*   Title: NVP_v1_app main file
*   Date:   18.03.2022
*   Author: hasan
*   Description:
*/

#ifndef SRC_NVP_V1_CONFIG_H_
#define SRC_NVP_V1_CONFIG_H_


#include <math.h>


#define SPARSE_MODE  0
#define DENSE_MODE   1
#define PING  0
#define PONG  1

// --------------------------------------
// ------ Data Precision
// --------------------------------------
#define ACTIVATION_BIT_WIDTH   8
#define ACTIVATION_MIN_VALUE   0
#define ACTIVATION_MAX_VALUE   2**(ACTIVATION_BIT_WIDTH)-1
#define WEIGHT_BIT_WIDTH       8
#define ACCUMULATOR_BIT_WIDTH  WEIGHT_BIT_WIDTH+ACTIVATION_BIT_WIDTH+4
#define BIAS_BIT_WIDTH		   ACCUMULATOR_BIT_WIDTH
#define BIAS_BIT_WIDTH_AXI	   32
#define QUANTIZATION_SCALE_BIT_WIDTH 18

// --------------------------------------
// ------ Streams and PE Arrays
// --------------------------------------
#define NUMBER_OF_READ_STREAMS         3
#define NUMBER_OF_PE_ARRAY_ROWS        1
#define NUMBER_OF_PE_ARRAYS_PER_ROW    3
#define NUMBER_OF_PE_ARRAYS            NUMBER_OF_PE_ARRAY_ROWS*NUMBER_OF_PE_ARRAYS_PER_ROW
#define NUMBER_OF_PES_PER_ARRAY        16

#define SUPPORTED_MAX_NUMBER_OF_PES_PER_ARRAY              64
#define SUPPORTED_MAX_NUMBER_OF_KERNEL_STEPS               4
#define SUPPORTED_MAX_NUMBER_OF_KERNELS                    SUPPORTED_MAX_NUMBER_OF_KERNEL_STEPS*NUMBER_OF_PES_PER_ARRAY
#define SUPPORTED_MAX_NUMBER_OF_CHANNEL_STEPS              SUPPORTED_MAX_NUMBER_OF_KERNEL_STEPS
#define SUPPORTED_MAX_NUMBER_OF_CHANNELS                   SUPPORTED_MAX_NUMBER_OF_KERNELS
#define SUPPORTED_MAX_NUMBER_OF_COLUMNS                    129 // the maximum is "SUPPORTED_MAX_NUMBER_OF_COLUMNS-1"
#define SUPPORTED_MAX_NUMBER_OF_OUTPUTS                    SUPPORTED_MAX_NUMBER_OF_COLUMNS*SUPPORTED_MAX_NUMBER_OF_KERNEL_STEPS
#define SUPPORTED_MAX_NUMBER_OF_ELEMENT_WISE_ADD_COLUMNS   SUPPORTED_MAX_NUMBER_OF_COLUMNS/4 // it can be up to "SUPPORTED_MAX_NUMBER_OF_COLUMNS", but element-wise add usually happens after some spatial size reduction

// --------------------------------------
// ------ Activation Memory & Bus
// --------------------------------------
#define AXI_BIT_WIDTH  64
#define AXI_BUS_BIT_WIDTH                          AXI_BIT_WIDTH
#define NUMBER_OF_ACTIVATION_LINE_BUFFERS          NUMBER_OF_READ_STREAMS*2
#define ACTIVATION_LINE_BUFFER_DEPTH               512 // single line buffer // TODO:: set me properly
#define ACTIVATION_BANK_BIT_WIDTH                  AXI_BUS_BIT_WIDTH //
#define ACTIVATION_BUFFER_BANK_COUNT               ((NUMBER_OF_PES_PER_ARRAY*ACTIVATION_BIT_WIDTH)/ACTIVATION_BANK_BIT_WIDTH)
#define ACTIVATION_LINE_BUFFER_SIZE                (ACTIVATION_LINE_BUFFER_DEPTH*ACTIVATION_BUFFER_BANK_COUNT*ACTIVATION_BANK_BIT_WIDTH)/8
#define ACTIVATION_BUFFER_TOTAL_SIZE               (NUMBER_OF_ACTIVATION_LINE_BUFFERS*ACTIVATION_LINE_BUFFER_DEPTH*ACTIVATION_BUFFER_BANK_COUNT*ACTIVATION_BANK_BIT_WIDTH)/8
#define ACTIVATION_LINE_BUFFER_0_START_ADDRESS     0x40000000
#define ACTIVATION_LINE_BUFFER_1_START_ADDRESS     ACTIVATION_LINE_BUFFER_0_START_ADDRESS + ACTIVATION_LINE_BUFFER_SIZE
#define ACTIVATION_LINE_BUFFER_2_START_ADDRESS     ACTIVATION_LINE_BUFFER_1_START_ADDRESS + ACTIVATION_LINE_BUFFER_SIZE
#define ACTIVATION_LINE_BUFFER_3_START_ADDRESS     ACTIVATION_LINE_BUFFER_2_START_ADDRESS + ACTIVATION_LINE_BUFFER_SIZE
#define ACTIVATION_LINE_BUFFER_4_START_ADDRESS     ACTIVATION_LINE_BUFFER_3_START_ADDRESS + ACTIVATION_LINE_BUFFER_SIZE
#define ACTIVATION_LINE_BUFFER_5_START_ADDRESS     ACTIVATION_LINE_BUFFER_4_START_ADDRESS + ACTIVATION_LINE_BUFFER_SIZE

// --------------------------------------
// ------ Weight Memory & Bus
// --------------------------------------
#define WEIGHT_AXI_BUS_BIT_WIDTH               AXI_BIT_WIDTH
#define NUMBER_OF_WEIGHT_LINE_BUFFERS          NUMBER_OF_PE_ARRAYS_PER_ROW
#define WEIGHT_BANK_BIT_WIDTH                  WEIGHT_AXI_BUS_BIT_WIDTH
#define WEIGHT_LINE_BUFFER_DEPTH               512 // TODO:: set me properly
#define WEIGHT_BUFFER_BANK_COUNT               (NUMBER_OF_PES_PER_ARRAY*WEIGHT_BIT_WIDTH)/WEIGHT_BANK_BIT_WIDTH
#define WEIGHT_LINE_BUFFER_SIZE                (WEIGHT_LINE_BUFFER_DEPTH*WEIGHT_BUFFER_BANK_COUNT*WEIGHT_BANK_BIT_WIDTH)/8
#define WEIGHT_BUFFER_TOTAL_SIZE               (NUMBER_OF_WEIGHT_LINE_BUFFERS*WEIGHT_LINE_BUFFER_DEPTH*WEIGHT_BUFFER_BANK_COUNT*WEIGHT_BANK_BIT_WIDTH)/8
#define WEIGHT_LINE_BUFFER_0_START_ADDRESS     0x80000000
#define WEIGHT_LINE_BUFFER_1_START_ADDRESS     WEIGHT_LINE_BUFFER_0_START_ADDRESS + WEIGHT_LINE_BUFFER_SIZE
#define WEIGHT_LINE_BUFFER_2_START_ADDRESS     WEIGHT_LINE_BUFFER_1_START_ADDRESS + WEIGHT_LINE_BUFFER_SIZE
#define BIAS_LINE_BUFFER_START_ADDRESS         0x80000000 + (1 << (int)ceil(log2(WEIGHT_BUFFER_TOTAL_SIZE)))


// --------------------------------------
// ------ Bias Memory & Bus
// --------------------------------------
#define BIAS_LINE_BUFFER_DEPTH  NUMBER_OF_PES_PER_ARRAY*SUPPORTED_MAX_NUMBER_OF_KERNEL_STEPS/8
#define BIAS_BANK_BIT_WIDTH     WEIGHT_AXI_BUS_BIT_WIDTH
#define BIAS_BUFFER_BANK_COUNT  (8*BIAS_BIT_WIDTH_AXI)/BIAS_BANK_BIT_WIDTH
#define BIAS_BUFFER_TOTAL_SIZE  BIAS_LINE_BUFFER_DEPTH*BIAS_BUFFER_BANK_COUNT*BIAS_BANK_BIT_WIDTH/8


// --------------------------------------
// ------ Intermediate FIFOs Depth
// --------------------------------------
#define COMBINED_DATA_FIFO_DEPTH  16
#define PE_DATA_FIFO_DEPTH        16
#define PW_DATA_FIFO_DEPTH        0
#define OUTPUT_FIFO_DEPTH         512 // TODO:: must reduce stalls in  post-processing pipeline... // This fifo has to be large to hold outputs until output_stage is ready. (output stage slice the output into "ACTIVATION_BIT_WIDTH" segments)
#define OUTPUT_STAGE_FIFO_DEPTH   256 // TODO:: calculate minimum size

// --------------------------------------
// ------ Register File
// --------------------------------------
#define REGISTER_WIDTH                             32
#define NUMBER_OF_REGISTERS                        10 // TODO:: minimize number of registers.
#define STREAM_1_PTR_REGISTER                      0
#define STREAM_2_PTR_REGISTER                      1
#define STREAM_3_PTR_REGISTER                      2
#define NUMBER_OF_CONV_LAYER_COLS_REGISTER         3
#define EXPECTED_TOTAL_NUMBER_OF_OUTPUTS_REGISTER  3
#define CHANNELS_MINUS_8_REGISTER                  4
#define QUANTIZATION_SCALE_REGISTER                4
#define KERNEL_STEPS_MINUS_1_REGISTER              5
#define NUMBER_OF_OUTPUT_SLICING_STEPS_REGISTER    5
#define WEIGHT_ADDRESS_OFFSET_REGISTER             5
#define CHANNEL_STEPS_REGISTER                     6
#define BIAS_STEPS_REGISTER                        6
#define NUMBER_OF_CHANNELS_REGISTER                7
#define STREAM_WRITER_REGISTER                     8
#define CONTROL_FLAGS_REGISTER                     NUMBER_OF_REGISTERS-1
//parameter integer PRE_REGISTER_LIST   [4:0] = {NUMBER_OF_CONV_LAYER_COLS_REGISTER, CHANNELS_MINUS_8_REGISTER, KERNEL_STEPS_MINUS_1_REGISTER, CHANNEL_STEPS_REGISTER, NUMBER_OF_CHANNELS_REGISTER}; // These are configured only once per layer.
#define PRE_REGISTER_LIST (int[]){NUMBER_OF_CONV_LAYER_COLS_REGISTER, CHANNELS_MINUS_8_REGISTER, KERNEL_STEPS_MINUS_1_REGISTER, CHANNEL_STEPS_REGISTER, NUMBER_OF_CHANNELS_REGISTER}
//parameter integer INTRA_REGISTER_LIST [4:0] = {CONTROL_FLAGS_REGISTER, STREAM_1_PTR_REGISTER, STREAM_2_PTR_REGISTER, STREAM_3_PTR_REGISTER, STREAM_WRITER_REGISTER}; // These are configured per trigger. CONTROL_FLAGS_REGISTER is configured per trigger.
#define INTRA_REGISTER_LIST (int[]){CONTROL_FLAGS_REGISTER, STREAM_1_PTR_REGISTER, STREAM_2_PTR_REGISTER, STREAM_3_PTR_REGISTER, STREAM_WRITER_REGISTER}
// register_0, register_1, register_2 sllicing
#define STREAM_PING_PONG_BIT_INDEX     0
#define STREAM_RELATIVE_ROW_MSB        2
#define STREAM_RELATIVE_ROW_LSB        1
#define STREAM_START_ADDRESS_MSB       REGISTER_WIDTH-1
#define STREAM_START_ADDRESS_LSB       STREAM_START_ADDRESS_MSB - log2(ACTIVATION_LINE_BUFFER_DEPTH)
// register_3 slicing
#define NUMBER_OF_CONV_LAYER_COLS_MSB  REGISTER_WIDTH-1
#define NUMBER_OF_CONV_LAYER_COLS_LSB  NUMBER_OF_CONV_LAYER_COLS_MSB - log2(SUPPORTED_MAX_NUMBER_OF_COLUMNS)
#define EXPECTED_TOTAL_NUMBER_OF_OUTPUTS_MSB  NUMBER_OF_CONV_LAYER_COLS_LSB-1
#define EXPECTED_TOTAL_NUMBER_OF_OUTPUTS_LSB  EXPECTED_TOTAL_NUMBER_OF_OUTPUTS_MSB - log2(SUPPORTED_MAX_NUMBER_OF_OUTPUTS)
// register_4 slicing
#define CHANNELS_MINUS_8_MSB  REGISTER_WIDTH-1
#define CHANNELS_MINUS_8_LSB  CHANNELS_MINUS_8_MSB - log2(SUPPORTED_MAX_NUMBER_OF_CHANNELS)
#define QUANTIZATION_SCALE_MSB     CHANNELS_MINUS_8_LSB-1
#define QUANTIZATION_SCALE_LSB     QUANTIZATION_SCALE_MSB - QUANTIZATION_SCALE_BIT_WIDTH
// register_5 slicing
#define KERNEL_STEPS_MINUS_1_MSB  REGISTER_WIDTH-1
#define KERNEL_STEPS_MINUS_1_LSB  KERNEL_STEPS_MINUS_1_MSB - log2(SUPPORTED_MAX_NUMBER_OF_KERNEL_STEPS)
#define NUMBER_OF_OUTPUT_SLICING_STEPS_MSB  KERNEL_STEPS_MINUS_1_LSB-1
#define NUMBER_OF_OUTPUT_SLICING_STEPS_LSB  NUMBER_OF_OUTPUT_SLICING_STEPS_MSB - log2(NUMBER_OF_PES_PER_ARRAY/ACTIVATION_BIT_WIDTH)
#define WEIGHT_ADDRESS_OFFSET_MSB           NUMBER_OF_OUTPUT_SLICING_STEPS_LSB-1
#define WEIGHT_ADDRESS_OFFSET_LSB           WEIGHT_ADDRESS_OFFSET_MSB - log2(WEIGHT_LINE_BUFFER_DEPTH)
// assert (WEIGHT_ADDRESS_OFFSET_LSB > 0) else $error("Register 5 assignment is larger than register width.")
// register_6 slicing
#define CHANNEL_STEPS_MSB  REGISTER_WIDTH-1
#define CHANNEL_STEPS_LSB  CHANNEL_STEPS_MSB - log2(SUPPORTED_MAX_NUMBER_OF_CHANNEL_STEPS)
#define BIAS_STEPS_MSB     CHANNEL_STEPS_LSB-1
#define BIAS_STEPS_LSB     BIAS_STEPS_MSB - log2(SUPPORTED_MAX_NUMBER_OF_KERNELS/ACTIVATION_BIT_WIDTH)
// register_7 slicing
#define NUMBER_OF_CHANNELS_MSB  REGISTER_WIDTH-1
#define NUMBER_OF_CHANNELS_LSB  NUMBER_OF_CHANNELS_MSB - log2(SUPPORTED_MAX_NUMBER_OF_CHANNELS)
// register_8 slicing
#define STREAM_WRITER_ADDRESS_MSB  REGISTER_WIDTH-1
#define STREAM_WRITER_ADDRESS_LSB  STREAM_WRITER_ADDRESS_MSB - OUTPUT_WRITER_ADDRESS_BIT_WIDTH
// register_9 slicing
#define EXECUTION_FLAG_BIT_INDEX               0
#define START_STREAM_READERS_BIT_INDEX         1
#define STREAM_MODE_BIT_INDEX                  2
#define PW_CONV_BIT_INDEX                      3
// #define WEIGHT_PING_PONG_BIT_INDEX             4
#define STRIDED_CONV_BIT_INDEX                 5
#define STREAM_1_ENABLE_INDEX                  6
#define STREAM_2_ENABLE_INDEX                  7
#define STREAM_3_ENABLE_INDEX                  8
#define ENABLE_ELEMENT_WISE_BUFFER_BIT_INDEX   9
#define ELEMENT_WISE_ADD_BIT_INDEX             10
#define STREAM_READERS_PING_PONG_BIT_INDEX     11
#define COMPRESS_OUTPUT_BIT_INDEX        	   12
#define BIAS_ENABLE_BIT_INDEX                  13

//------------------------------------------//
// Interrupts
//------------------------------------------//
// from pg201-zynq-ultrascale-plus-processing-system, Table 2-1
#define NEXT_COMMAND_INTERRUPT_ID 			XPAR_FABRIC_NVP_V1_TOP_WRAPPER_V_0_O_NEXT_COMMAND_INTERRUPT_INTR
#define OUTPUT_LINE_STORED_INTERRUPT_ID 	XPAR_FABRIC_NVP_V1_TOP_WRAPPER_V_0_O_NEXT_COMMAND_INTERRUPT_INTR + 1
#define DATA_BUS_CDMA_INTERRUPT_ID 			XPAR_FABRIC_AXI_CDMA_0_CDMA_INTROUT_INTR
#define WEIGHT_BUS_CDMA_INTERRUPT_ID 		XPAR_FABRIC_AXI_CDMA_0_CDMA_INTROUT_INTR

//XPAR_FABRIC_AXI_CDMA_0_CDMA_INTROUT_INTR
//XPAR_FABRIC_NVP_V1_TOP_WRAPPER_V_0_O_NEXT_COMMAND_INTERRUPT_INTR

//#define INTC_DEVICE_ID						XPAR_SCUGIC_SINGLE_DEVICE_ID // XPAR_PS7_SCUGIC_0_DEVICE_ID

//------------------------------------------//
// CDMA
//------------------------------------------//
#define DMA_0_CTRL_DEVICE_ID		XPAR_AXICDMA_0_DEVICE_ID
//#define DMA_1_CTRL_DEVICE_ID		XPAR_AXICDMA_0_DEVICE_ID

#define CONTROL_AXI_BASE_ADDRESS XPAR_NVP_V1_TOP_WRAPPER_V_0_BASEADDR


#endif /* SRC_NVP_V1_CONFIG_H_ */
